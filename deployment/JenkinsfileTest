@Library('pipeline_shared_library') _
def commonFunctions = commonFunctions(this)

def SRC_DIR = "subride-front"
def PIPELINE_ID = "${SRC_DIR}-${env.BUILD_NUMBER}"

//=== 사전 준비 작업 ==
podTemplate(
    label: "${PIPELINE_ID}",
    containers: [
        containerTemplate(name: 'ssh', image: 'kroniak/ssh-client', command: 'cat', ttyEnabled: true),
    ]
)
{
    //-- NFS 공유 볼륨 디렉토리 생성
    node("${PIPELINE_ID}") {
        stage("Prepare Cache Volumes") {
            container("ssh") {
                withCredentials([sshUserPrivateKey(credentialsId: "${NFS_CREDENTIAL}", keyFileVariable: 'SSH_KEY_FILE', usernameVariable: 'SSH_USER')]) {
                    sh """
                        mkdir -p ~/.ssh
                        ssh-keyscan -H ${NFS_HOST} >> ~/.ssh/known_hosts
                        
                        ssh -i ${SSH_KEY_FILE} ${SSH_USER}@${NFS_HOST} "sudo mkdir -p /${NFS_DIR}/${TRIVY_CACHE_DIR}/${SRC_DIR}"
                        
                    """
                }
            }
        }
    }
}

//=== Build, Release, Run ======
podTemplate(
    label: "${PIPELINE_ID}",
    containers: [
        containerTemplate(name: "trivy", image: "aquasec/trivy", ttyEnabled: true, command: "cat"),
        containerTemplate(name: "kubectl", image: "lachlanevenson/k8s-kubectl", command: "cat", ttyEnabled: true),
        containerTemplate(name: "node", image: "node:22.2.0-alpine3.20", ttyEnabled: true, command: "cat"),
        containerTemplate(name: 'sonar-scanner', image: 'sonarsource/sonar-scanner-cli', ttyEnabled: true, command: 'cat'),
        containerTemplate(name: 'podman', image: "quay.io/podman/stable", ttyEnabled: true, command: 'cat', privileged: true),
        containerTemplate(name: 'envsubst', image: "hiondal/envsubst", command: 'sleep', args: '1h')
    ],
    volumes: [
        nfsVolume(mountPath: "/${TRIVY_CACHE_DIR}", serverAddress: "${NFS_HOST}", serverPath: "/${NFS_DIR}/${TRIVY_CACHE_DIR}/${SRC_DIR}", readOnly: false),
        nfsVolume(mountPath: "/etc/containers/registries.conf.d", serverAddress: "${NFS_HOST}", serverPath: "/${NFS_DIR}/registries.conf.d", readOnly: true)
    ]
)
{
    node("${PIPELINE_ID}") {
        stage("Get Source") {
            checkout scm
        }

        commonFunctions.notifySlack("STARTED", "#FFFF00")

        BASEDIR = "./deployment"
        def props = readProperties  file:"${BASEDIR}/deploy_env_vars"
        APP_NAME =              props["APP_NAME"]
        IMAGE_REG_HOST =        props["IMAGE_REG_HOST"]
        IMAGE_REG_ORG =         props["IMAGE_REG_ORG"]
        IMAGE_TAG =             props["IMAGE_TAG"]
        NAMESPACE =             props["NAMESPACE"]
        IMAGE_REG_CREDENTIAL =  props["IMAGE_REG_CREDENTIAL"]
        MANIFEST_DIR =          props["MANIFEST_DIR"]
        MANIFEST_FILENAME =     props["MANIFEST_FILENAME"]
        IMAGE_SCAN_SEVERITY =   props["IMAGE_SCAN_SEVERITY"]
        API_GATEWAY_FQDN =      props["API_GATEWAY_FQDN"]
        IMAGE_MANIFEST_DIR =    props["IMAGE_MANIFEST_DIR"]
        PROJECT_DIR =           props["PROJECT_DIR"]
        SERVICE_PORT =          props["SERVICE_PORT"]
        GIT_ACCESS_CREDENTIAL = props["GIT_ACCESS_CREDENTIAL"]

        def IMAGE_PATH = "${IMAGE_REG_HOST}/${IMAGE_REG_ORG}/${APP_NAME}"

        //-- 개발 시 CI/CD를 빠르게 하기 위해 일부 Stage Skip(sonar,trivy)
        def skipStages = "sonar,trivy"

        try {


            stage( "Generate deployment yaml" ) {
                container("envsubst") {
                    sh """
                        set -a
                        source ${BASEDIR}/deploy_env_vars
                        set +a

                        envsubst < ${BASEDIR}/deploy.yaml.template > ${BASEDIR}/${MANIFEST_FILENAME}
                        cat ${BASEDIR}/${MANIFEST_FILENAME}
                    """
                }
            }

            stage("Update manifest") {
                withCredentials([usernamePassword(credentialsId: "${GIT_ACCESS_CREDENTIAL}", usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                    sh "git clone https://${GIT_USERNAME}:${GIT_PASSWORD}@${MANIFEST_REPO}"
                }
                
                sh "cp -f ${BASEDIR}/${MANIFEST_FILENAME} ${MANIFEST_DIR}/${MANIFEST_FILENAME}"
            }           

            stage("Push to Git") {
                withCredentials([usernamePassword(credentialsId: '${GIT_ACCESS_CREDENTIAL}', usernameVariable: 'GITHUB_USER', passwordVariable: 'GITHUB_TOKEN')]) {
                    dir("${MANIFEST_DIR}") {
                        try {
                            sh """
                                git checkout -B main
                                git config user.email "jenkins@gmail.com"
                                git config user.name "Jenkins"
                                git add ${MANIFEST_FILENAME}
                                git commit -m "Update ${MANIFEST_FILENAME}"
                                git push https://${GITHUB_USER}:${GITHUB_TOKEN}@${MANIFEST_REPO} HEAD:main
                            """
                        } catch (e) {
                            echo "Error occurred while push Deploy yaml. but keep going: ${e}"
                        }
                    }
                }
            }
            
            commonFunctions.notifySlack("${currentBuild.currentResult}", "#00FF00")
            echo "**** FINISH ALL STAGES : SUCCESS"
        } catch(e) {
            currentBuild.result = "FAILED"
            commonFunctions.notifySlack("${currentBuild.currentResult}", "#FF0000")
        }
    }
}